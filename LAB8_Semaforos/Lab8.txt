Aluno Wellington Bezerra - 1413383
Aluno Guilherme Marques - 1220676

QUESTÃO 1) 

Execute o programa dado (exemplo de uso
de semáforos) e verifique / explique sua
execução.
-----------------------------------------------------
exer1.c

/* Exemplo de uso de semaforo */

#include <sys/sem.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

// inicializa o valor do semáforo
int setSemValue(int semId);

// remove o semáforo
void delSemValue(int semId);

// operação P
int semaforoP(int semId);

//operação V
int semaforoV(int semId);

int main (int argc, char * argv[]) {
  int i;
  char letra = 'o';
  int semId;

  if (argc > 1) {
    semId = semget (8752, 1, 0666 | IPC_CREAT);
    setSemValue(semId);
    letra = 'x';
    sleep (2);
  }
  else {
    while ((semId = semget (8752, 1, 0666)) < 0) {
      putchar ('.');
      fflush(stdout);
      sleep (1);
    }
  }

  for (i=0; i<10; i++) {
    semaforoP(semId);
    putchar (toupper(letra)); fflush(stdout);
    sleep(rand() %3);
    putchar (letra); fflush(stdout);
    semaforoV(semId);
    sleep(rand() %2);
  }

  printf ("\nProcesso %d terminou\n", getpid());

  if (argc > 1) {
    sleep(10);
    delSemValue(semId);
  }

  return 0;
}

int setSemValue(int semId) {
   union semun semUnion;
   semUnion.val = 1;
   return semctl(semId, 0, SETVAL, semUnion);
}

void delSemValue(int semId) {
   union semun semUnion;
   semctl(semId, 0, IPC_RMID, semUnion);
}

int semaforoP(int semId) {
   struct sembuf semB;

   semB.sem_num = 0;
   semB.sem_op = -1;
   semB.sem_flg = SEM_UNDO;

   semop(semId, &semB, 1);

   return 0;
}

int semaforoV(int semId) {
   struct sembuf semB;

   semB.sem_num = 0;
   semB.sem_op = 1;
   semB.sem_flg = SEM_UNDO;

   semop(semId, &semB, 1);

   return 0;
}


-----------------------------------------------------
COMPILAÇÃO E EXECUÇÃO

$ gcc -o exer1 exer1.c
$ ./exer1 &
$ ./exer1 1

-----------------------------------------------------
RESULTADO

Saída: 
OoOoXxOoXxOoXxOoXxOoXxOoXxOoXxOoOo
Processo 3575 terminou
X
[1]    Done                          ./exer1
xXxXx
Processo 3576 terminou
-----------------------------------------------------
CONCLUSÃO

1. Depois de compilar o programa, foi necessário compilá-lo em background da seguinte forma: ./nomeadoprograma &
2. e para executá-lo em foreground, tivemos que passar os seguintes parâmetros: ./nomedoprograma 1
3. o semáforo será criado e a área de memória estará protegida caso outro acesso ocorra caso ela esteja sendo utilizada
4. X: entra na região crítica e x: sai da região crítica
-----------------------------------------------------
QUESTÃO 2) 

Escreva um programa formado por dois
processos concorrentes, leitor e impressor, que
compartilham uma área de trabalho (memória)
executando um loop infinito. Para sincronizar as
suas ações, eles fazem uso de semáforos.
 O processo leitor fica lendo caracteres da entrada
padrão e colocando em um buffer de 16
posições. Quando o buffer está cheio o processo
impressor deve imprimi-lo na saída padrão
-----------------------------------------------------
exer2.c

#include <sys/sem.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <sys/wait.h>

#define TRUE 1

// inicializa o valor do semáforo
int setSemValue(int semId);

// remove o semáforo
void delSemValue(int semId);

// operação P
int semaforoP(int semId);

//operação V
int semaforoV(int semId);

int main(int argc, char const * argv[]) {
    int semId, pid, segmento, cont = 0;
    char * mensagem, leitura, lixo;

    // Aloca a memória compartilhada
    segmento = shmget(IPC_PRIVATE, sizeof(char) * 17, IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR );
    semId = semget (8752, 1, 0666 | IPC_CREAT);
    setSemValue(semId);

    // Associa a memória compartilhada ao processo
    mensagem = (char *) shmat(segmento, 0, 0);

    // Fazer consumidor entender quando o buffer esta cheio
    mensagem[16] = '\0';
    mensagem[15] = '\0';

    if((pid = fork()) == 0) { //Produtor
        while(TRUE) {
            semaforoP(semId);

            printf("Digite um caracter: ");
            scanf("%c%c", &leitura, &lixo);
            mensagem[cont] = leitura;
            cont++;

            if (cont == 16) cont = 0;

            semaforoV(semId);
            sleep(1);
        }
    }
    else { //Consumidor
        while(TRUE) {
            semaforoP(semId);
            fflush(stdout);

            if(mensagem[15] != '\0') {
                printf("\n-------------------\n");
                printf("%s\n", mensagem);
                printf("-------------------\n\n");
                mensagem[15] = '\0';
            }

            semaforoV(semId);
            sleep(2);
        }
    }

    shmdt(mensagem);
    shmctl(segmento, IPC_RMID, 0);
    delSemValue(semId);

    return 0;
}

int setSemValue(int semId) {
    union semun semUnion;
    semUnion.val = 1;
    return semctl(semId, 0, SETVAL, semUnion);
}

void delSemValue(int semId) {
    union semun semUnion;
    semctl(semId, 0, IPC_RMID, semUnion);
}

int semaforoP(int semId) {
    struct sembuf semB;

    semB.sem_num = 0;
    semB.sem_op = -1;
    semB.sem_flg = SEM_UNDO;

    semop(semId, &semB, 1);

    return 0;
}

int semaforoV(int semId) {
    struct sembuf semB;

    semB.sem_num = 0;
    semB.sem_op = 1;
    semB.sem_flg = SEM_UNDO;

    semop(semId, &semB, 1);

    return 0;
}

-----------------------------------------------------
COMPILAÇÃO E EXECUÇÃO

$ gcc -o exer2 exer2.c
$ ./exer2
-----------------------------------------------------
RESULTADO

Digite um caracter: a
Digite um caracter: b
Digite um caracter: c
Digite um caracter: d
Digite um caracter: e
Digite um caracter: f
Digite um caracter: g
Digite um caracter: h
Digite um caracter: i
Digite um caracter: j
Digite um caracter: l
Digite um caracter: m
Digite um caracter: n
Digite um caracter: o
Digite um caracter: p
Digite um caracter: q

-------------------
abcdefghijlmnopq
-------------------

Digite um caracter: 

-----------------------------------------------------
CONCLUSÃO

Primeiro, a área de memória é criada para ser compartilhada com os processos que serão criados
Um fork() é feito e, o processo filho será o produtor e o processo pai será o consumidor
Dentro de cada processo, um while(TRUE) é feito para executar um loop infinito como é pedido pelo enunciado
O processo do produtor será responsável em ler os caracteres do teclado e colocar dentro de cada posição do buffer , enquanto o processo consumidor será responsável em mostrar todos os caracteres presentes dentro do buffer.
Obs: No processo do produtor e do consumidor, a área de memória compartilhada será protegida utilizando as seguintes funções: semaforoP() e semáforoV()
-----------------------------------------------------

QUESTÃO 3) 

Faça programas para alterar um valor de
uma variável na memória compartilhada.
Um programa soma 1 à variável e o outro
soma 5 à variável. Utilize semáforos para
alterar a variável (região crítica).
-----------------------------------------------------
exer3-1.c

#include <sys/sem.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h> 
#include <sys/shm.h>
#include <sys/stat.h>
#define BUFFER_SIZE 16
#define MY_IPC 1212

// inicializa o valor do semáforo
int setSemValue(int semId);

// remove o semáforo
void delSemValue(int semId);

// operação P
int semaforoP(int semId);

//operação V
int semaforoV(int semId);

int main(int argc, char const *argv[]) {
    
    int semId;
    int i;
    int segmento;
    int * var;

    /* Aloca a memória compartilhada */
    segmento = shmget(MY_IPC, sizeof(int), IPC_CREAT | S_IRUSR | S_IWUSR );
    if (segmento == -1) {
        puts ("Erro na criação de segmento de memoria compartilhada."); 
        exit(1);
    }

    /* Associa a memória compartilhada ao ponteiro */
    var = (int *) shmat(segmento, 0, 0);
    
    *var = 0;

    /* cria um novo semáforo ou obtem a chave do que já existe */
    semId = semget (8765, 1, 0666 | IPC_CREAT);
    
    /* inicializa o valor do semáforo */
    setSemValue(semId);

    while (1) {
        semaforoP(semId);
        *var += 1;
        printf("%d\n", *var);
        sleep(rand()%3);    
        semaforoV(semId);
        sleep(rand()%2);
    }

    shmdt (var); 
    shmctl (segmento, IPC_RMID, 0); 

    return 0;
}

int setSemValue( int semId) {
    union semun semUnion;
    semUnion.val = 1;
    return semctl(semId, 0, SETVAL, semUnion);
}

void delSemValue(int semId) {
    union semun semUnion;
    semctl(semId, 0, IPC_RMID, semUnion);
}

int semaforoP(int semId) {
    struct sembuf semB;

    semB.sem_num = 0;
    semB.sem_op = -1;
    semB.sem_flg = SEM_UNDO;

    semop(semId, &semB, 1);

    return 0;
}

int semaforoV(int semId) {
    struct sembuf semB;

    semB.sem_num = 0;
    semB.sem_op = 1;
    semB.sem_flg = SEM_UNDO;

    semop(semId, &semB, 1);

    return 0;
}

-----------------------------------------------------
exer3-2.c

#include <sys/sem.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h> 
#include <sys/shm.h>
#include <sys/stat.h>
#define BUFFER_SIZE 16
#define MY_IPC 1212

// inicializa o valor do semáforo
int setSemValue(int semId);

// remove o semáforo
void delSemValue(int semId);

// operação P
int semaforoP(int semId);

//operação V
int semaforoV(int semId);

int main(int argc, char const *argv[]) {
    int semId;
    int i;
    int segmento;
    int * var;

    /* Aloca a memória compartilhada */
    segmento = shmget(MY_IPC, sizeof(int), IPC_CREAT | S_IRUSR | S_IWUSR );
    if (segmento == -1) {
        puts ("Erro na criação de segmento de memoria compartilhada."); 
        exit(1);
    }

    /* Associa a memória compartilhada ao processo */
    var = (int *) shmat(segmento, 0, 0);
    
    //*var = 0;

    /* cria um novo semáforo ou obtem a chave do que já existe */
    semId = semget (8765, 1, 0666 | IPC_CREAT);
    
    /* inicializa o valor do semáforo */
    setSemValue(semId);

    while (1) {
        semaforoP(semId);
        *var += 5;
        printf("%d\n", *var);
        sleep(rand()%3);    
        semaforoV(semId);
        sleep(rand()%2);
    }

    shmdt (var); 
    shmctl (segmento, IPC_RMID, 0); 

    return 0;
}

int setSemValue( int semId) {
    union semun semUnion;
    semUnion.val = 1;
    return semctl(semId, 0, SETVAL, semUnion);
}

void delSemValue(int semId) {
    union semun semUnion;
    semctl(semId, 0, IPC_RMID, semUnion);
}

int semaforoP(int semId) {
    struct sembuf semB;

    semB.sem_num = 0;
    semB.sem_op = -1;
    semB.sem_flg = SEM_UNDO;

    semop(semId, &semB, 1);

    return 0;
}

int semaforoV(int semId) {
    struct sembuf semB;

    semB.sem_num = 0;
    semB.sem_op = 1;
    semB.sem_flg = SEM_UNDO;

    semop(semId, &semB, 1);

    return 0;
}

-----------------------------------------------------
COMPILAÇÃO E EXECUÇÃO

$ gcc -o exer3-1 exer3-1.c
$ gcc -o exer3-2 exer3-2.c
$ ./exer3-1
$ ./exer3-2
-----------------------------------------------------
RESULTADO

~/Desktop/LAB8_Semaforos
❯ gcc -o exer3-1 exer3-1.c

~/Desktop/LAB8_Semaforos
❯ gcc -o exer3-2 exer3-2.c

~/Desktop/LAB8_Semaforos
❯ ./exer3-1
1
2
3
4
5
^C

~/Desktop/LAB8_Semaforos 6s
❯ ./exer3-2
10
15
20
25
30
35
40
45
^C

~/Desktop/LAB8_Semaforos 9s
❯ 

-----------------------------------------------------
CONCLUSÃO

Primeiro é feito uma alocação da memória compartilhada 
Depois associa a memória compartilhada ao ponteiro
Cria-se um semáforo e depois o inicializa.
A área de memória  compartilhada será acessada a cada 1 segundo, ela será protegida utilizando-se as funções semaforoP() e semaforoV().
O primeiro programa incrementará uma unidade na área de memória compartilhada enquanto o segundo programa irá incrementá-la em 5 unidades.
-----------------------------------------------------
